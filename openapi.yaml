openapi: 3.1.0
info: 
 title: Ecommerce API
 description: API for an E-commerce platform .

 contact:
    email: njood917@gmail.com
    
    
 servers:
  - url: http://localhost:3000/
  - url: http://localhost:3001/
    
tags:
  - name: products
  
    description: products information and related operations 
    
  - name: users
    description: user informattion and operations
  
  - name: admin
    description: authurity access for spicific Operations

paths:
  /products/{id}:   
    put:
      tags:
       - admin
      summary: update info of product
      description: update info of a product by Id
      operationId: updateProduct
      requestBody:
        description: Update an existent product in the store
        content:
          products.json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
                  $ref: '#/components/schemas/Product'
        responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      responses:
       200:
         description: update an exsiting product in store
         content:
          application/json:
           schema:
            $ref:"#/components/schemas/Product"
       500:
         description: server error
         
    delete:
       tags:
        - admin
       summary: Deletes a product
       description: delete a product
       operationId: deleteProduct
       parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: id
          in: path
          description: Product id to delete
          required: true
          schema:
            type: integer
            format: int64
    responses:
        '400':
          description: Invalid product value
    post:
      tags:
       - admin
      summary: Updates a product in the store with form data
      description: ''
      operationId: updateProductWithForm
      parameters:
        - name: api_key
          in: path
          description: ID of product that needs to be updated
          required: true
          schema:
            type: string
        - name: description
          in: query
          description: description of products that needs to be updated
          
          schema:
            type: string
        - name: categories
          in: query
          description: category of products that needs to be updated
          schema:
            type: array
            items:
             $ref: '#/components/schemas/Category'
        - name: variants
          in: query
          description: variant of products that needs to be updated
          schema:
            type: array
            items:
             $ref: '#/components/schemas/Variants'
        - name: sizes
          in: query
          description: sizes of products that needs to be updated
          schema:
            type: array
          items:
             $ref: '#/components/schemas/Sizes'
  responses:
    '405':
          description: Invalid input
          
          
  /products:
    post:
      tags:
        - admin
      summary: Add a new product to the store
      description: Add a new product to the store
      operationId: addProduct
      requestBody:
        description: Create a new product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '405':
          description: Invalid input
      
    get:
      tags:
        - product
      summary: display list of all products 
      description:  list of all products are displayed 
      operationId: findAllProduct
      parameters:
        - name: product
          in: query
          description: Name values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid status value


  /product/findByName:
    get:
      tags:
        - product
      summary: Finds Products by name
      description: product can be found by typing product name in serach bar
      operationId: findProductByName
      parameters:
        - name: name
          in: query
          description: Name values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            items:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid status value

  /product/findByCategories:
    get:
      tags:
        - product
      summary: Finds Products by category
      description: product can be found by selecting product category in serach bar
      operationId: findProductByCategory
      parameters:
        - name: categories
          in: query
          description: Category values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: "All"
            enum:
              - All
              - Jigsaw puzzle
              - Wooden puzzle
              - Lego
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid status value

  /product/findByVariant:
    get:
      tags:
        - product
      summary: Finds Products by variant
      description: product can be found by selecting product variant in serach bar
      operationId: findProductByVariant
      parameters:
        - name: variants
          in: query
          description: variant values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            items:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid status value
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [454546]
        name:
          type: string
          description: Product name
          examples: ["Jigsaw puzzle"]
        description:
          type: string
          description: Product description
          examples: ["500 pieces jogsaw puzzles for all ages"]
        categories:
          type: array
          items:
             $ref: '#/components/schemas/Category'
        variants:
          type: array
          items:
             $ref: '#/components/schemas/Variants/items'
        sizes:
          type: array
          items:
             $ref: '#/components/schemas/Sizes/items'
      xml:
        name: product
  
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1]
        name:
          type: string
          examples: [Lego]
      xml:
        name: category
    
    Variants:
      type: array
      items:
        type: string
      xml:
        name: variants

    Sizes:
      type: array
      items:
        type: string
      xml:
        name: sizes

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [10]
        firstName:
          type: string
          examples: [John]
        lastName:
          type: string
          examples: [James]
        email:
          type: string
          examples: [john@email.com]
        password:
          type: string
          examples: ['12345']
      xml:
        name: user
    Admin:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [10]
        firstName:
          type: string
          examples: [John]
        lastName:
          type: string
          examples: [James]
        UserName:
          type: string
        email:
          type: string
          examples: [john@email.com]
        password:
          type: string
          examples: ['12345']
      xml:
        name: admin
    
    
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Product:
      description: Product object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
        application/xml:
          schema:
            $ref: '#/components/schemas/Product'
    Variants:
      description: Variant object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Variants'
        application/xml:
          schema:
            $ref: '#/components/schemas/Variants'
    Sizes:
      description: Size object that needs to be added to the product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Sizes'
        application/xml:
          schema:
            $ref: '#/components/schemas/Sizes'
    Categories:
      description: Category object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Category'
        application/xml:
          schema:
            $ref: '#/components/schemas/Category'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    AdminArray:
      description: List of admin object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Admin'

         
#     /products:     
#     get:
#     tags:
#       - admin
#     summary: Create a new product
#     requestBody:
#         description: Product data
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/Product"
#       responses:
#         '201':
#           description: Product created successfully
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Product"
#         '500':
#           description: Server error

#   put:
#       summary: Update a product by ID
#       parameters:
#         - name: productId
#           in: path
#           required: true
#           description: ID of the product to be updated
#           schema:
#             type: string
#       requestBody:
#         description: Updated product data
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/Product"
#       responses:
#         '200':
#           description: Product updated successfully
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Product"
#         '404':
#           description: Product not found
#         '500':
#           description: Server error

#   delete:
#       summary: Delete a product by ID
#       parameters:
#         - name: productId
#           in: path
#           required: true
#           description: ID of the product to be deleted
#           schema:
#             type: string
#       responses:
#         '204':
#           description: Product deleted successfully
#         '404':
#           description: Product not found
#         '500':
#           description: Server error
      
#   /users:
#     get:
#     summary: get a list of users
#     responses:
#       200:
#         description: all the users are returned
#         content:
#         application/json:
#           schema:
#           $ref:"#/components/schemas/User"
#     500:
#       description: server error
#   /users/{id}:
#     post:
#       summary: Create a new user
#       requestBody:
#         description: User data
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/User"
#       responses:
#         '201':
#           description: User created successfully
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/User"
#         '500':
#           description: Server error

#     put:
#       summary: Update a User by ID
#       parameters:
#         - name: userId
#           in: path
#           required: true
#           description: ID of the User to be updated
#           schema:
#             type: string
#       requestBody:
#         description: Updated User data
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/User"
#       responses:
#         '200':
#           description: User updated successfully
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/User"
#         '404':
#           description: User not found
#         '500':
#           description: Server error

#     delete:
#       summary: Delete a user by ID
#       parameters:
#         - name: productId
#           in: path
#           required: true
#           description: ID of the user to be deleted
#           schema:
#             type: string
#       responses:
#         '204':
#           description: User deleted successfully
#         '404':
#           description: User not found
#         '500':
#           description: Server erro
#   /orders:
#     get:
#     summary: get a list of orders
#     responses:
#       200:
#         description: all the orders are returned
#         content:
#         application/json:
#         schema:
#           $ref:"#/components/schemas/Order"
#     500:
#       description: server error
#   /orders/{id}:     
#     post:
#       summary: Create a new order
#       requestBody:
#         description: Order data
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/Order"
#       responses:
#         '201':
#           description: Order created successfully
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/User"
#         '500':
#           description: Server error

#     put:
#       summary: Update a Order by ID
#       parameters:
#         - name: orderId
#           in: path
#           required: true
#           description: ID of the Order to be updated
#           schema:
#             type: string
#       requestBody:
#         description: Updated Order data
#         required: true
#         content:
#           application/json:
#             schema:
#               $ref: "#/components/schemas/Order"
#       responses:
#         '200':
#           description: User updated successfully
#           content:
#             application/json:
#               schema:
#                 $ref: "#/components/schemas/Order"
#         '404':
#           description: Order not found
#         '500':
#           description: Server error

#     delete:
#       summary: Delete a Order by ID
#       parameters:
#         - name: OrderId
#           in: path
#           required: true
#           description: ID of the Order to be deleted
#           schema:
#             type: string
#       responses:
#         '204':
#           description: Order deleted successfully
#         '404':
#           description: Order not found
#         '500':
#           description: Server erro
      
# components:
#   schemas:
#   Product:
#     type: object
#     required:
#     - title
#     - price
#     - category
#     properties:
#         id:
#           type: string
#           description: the id will generate automatically in back end
#         title:
#           type: string
#           description: the title of product
#         price:
#           type: number
#           description: the price of product
#         category:
#           type: string
#           description: the category of product
#         image:
#           type: string
#           description: the url of product image
#   User:
#       type: object
#       required:
#       - name
#       - email
#       - password
#       properties:
#         id:
#           type: string
#           description: the id will generate automatically in back end
#         name:
#           type: string
#           description: the name of user
#         email:
#           type: string
#           description: the email of user
#         password:
#           type: string
#           description: the password of user
#   Order:
#       type: object
#       required:
#       - productId
#       - purchasedAt
#       - name
#       properties:
#         id:
#           type: string
#           description: the id will generate automatically in back end
#         name:
#           type: string
#           description: the name of order
#         productId:
#           type: number
#           description: the productId of order
#         purchasedAt:
#           type: string
#           description: the purchasedAt of order

  # AdminArray:
  #     description: list of admin array
  #     content:
  #         application/json:
  #           schema:
  #           type: array
  #             items: $ref: '#/components/schemas/Admin'
          
  
  
 
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           
           