openapi: 3.0.0

info:
  title: Ecommerce API
  description: api for ecommerce project 
  version: 1.0.0
  contact:
    name: Example
    email: example@example.com

servers:
  - url: http://localhost:3001

tags:
  - name : products
    description: everything about products
  - name : users
    description: everything about users
  - name : orders
    description: everything about orders
  - name : categories
    description: everything about categories



components:
 schemas:
  Product:
   type : object
   properties:
    id:
     type: string
    title:
     type: string
    price:
     type: number
    description:
     type: string
    category:
     $ref: '#/components/schemas/Category'
    image:
     type: string
    rating:
     type: object
     properties:
      rate: 
       type: number
      count: 
       type: number

  User:
   type : object
   properties:
    id:
     type: string
    name:
     type: string
    email:
     type: string
    password:
     type: string
     
  Category:
   type : object
   properties:
    id:
     type: string
    name:
     type: string
    description:
     type: string

  Order:
   type : object
   properties:
    id:
     type: string
    products:
     type: array
     items:
     $ref: '#/components/schemas/Product'
    totalPrice:
     type: number  
     



paths:
  /products:
    get:
      tags:
        - products
      summary: return all products
      parameters: 
        - in: query
          name: page
          schema:
            type: number
          required: false  
        - in: query
          name: limit
          schema:
            type: number 
          required: false 

        - in: query
          name: sortBy 
          schema:
            type: number
            enum:
             - 'asc'
             - 'desc'  
          required: false   
      responses:
        200:
          description: a list of products
          content: 
           application/json:
            schema:
             type: array
             items: 
               $ref: '#/components/schemas/Product'

        500:
         description: server error
             
    post:
      tags:
        - products
      summary: create a product
      requestBody:
         content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Product'
       
      responses:
        201:
          description: create a product
          content: 
           application/json:
            schema: 
               $ref: '#/components/schemas/Product'

        500:
         description: server error       
  /products/{productId}:    
    get:
      tags:
         - products 
      summary: get a product
      parameters:
        - in: path
          name: productId 
          required: true
          schema:
           type: string
      responses:
        201:
          description: find a product by Id 
          content: 
           application/json:
            schema: 
               $ref: '#/components/schemas/Product'
        404:
         description: product is not found   
        500:
         description: server error      

    delete:
      tags:
         - products
      summary: delete a product
      parameters:
        - in: path
          name: productId 
          required: true
          schema:
           type: string
      responses:
        200:
          description: delete a product by Id 
        404:
         description: product is not found   
        500:
         description: server error    

    
    put:
      tags:
        - products
      summary: update a product
      parameters:
        - in: path
          name: productId 
          required: true
          schema:
           type: string
      requestBody:
        content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Product'
      responses:
        200:
          description: update a product by Id 
          content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Product'
        404:
         description: product is not found   
        500:
         description: server error                 
  /products/searchText:    
    get:
      tags:
         - products 
      summary: search a product
      parameters:
        - in: query
          name: searchText  
          required: true
          schema:
           type: string
      responses:
        201:
          description: search a product by name 
          content: 
           application/json:
             schema:
              type: array
              items: 
               $ref: '#/components/schemas/Product'
        404:
         description: product are not found   
        500:
         description: server error      


  /users:
    get:
      tags:
        - users
      summary: return all users  
      responses:
        200:
          description: a list of users
          content: 
           application/json:
            schema:
             type: array
             items: 
               $ref: '#/components/schemas/User'

        500:
         description: server error
             
    post:
      tags:
        - users
      summary: create a user
      requestBody:
         content: 
           application/json:
            schema:
               $ref: '#/components/schemas/User'
       
      responses:
        201:
          description: create a user
          content: 
           application/json:
            schema: 
               $ref: '#/components/schemas/User'

        500:
         description: server error       
  /users/{userId}:    
    get:
      tags:
         - users 
      summary: get a user
      parameters:
        - in: path
          name: userId 
          required: true
          schema:
           type: string
      responses:
        201:
          description: find a user by Id 
          content: 
           application/json:
            schema: 
               $ref: '#/components/schemas/User'
        404:
         description: user is not found   
        500:
         description: server error      

    delete:
      tags:
         - users
      summary: delete a user
      parameters:
        - in: path
          name: userId 
          required: true
          schema:
           type: string
      responses:
        200:
          description: delete a user by Id 
        404:
         description: user is not found   
        500:
         description: server error    

    
    put:
      tags:
        - users
      summary: update a user
      parameters:
        - in: path
          name: userId 
          required: true
          schema:
           type: string
      requestBody:
        content: 
           application/json:
            schema:
               $ref: '#/components/schemas/User'
      responses:
        200:
          description: update a user by Id 
          content: 
           application/json:
            schema:
               $ref: '#/components/schemas/User'
        404:
         description: user is not found   
        500:
         description: server error 
  /users/login:
     post:
      tags:
        - users
      summary: login
      requestBody:
         content: 
           application/json:
            schema:
               type: object
               properties:
                email: 
                 type: string
                password: 
                 type: string
       
      responses:
        200:
          description:  user authontication sucessfull
        401:
          description:  Unauthorized  
        500:
         description: server error 
  /users/logout:
     post:
      tags:
        - users
      summary: logout  
      responses:
        200:
          description:  user logout sucessfull
        500:
         description: server error                                            
  /categories:
    get:
      tags:
        - categories
      summary: return all categories  
      responses:
        200:
          description: a list of categories
          content: 
           application/json:
            schema:
             type: array
             items: 
               $ref: '#/components/schemas/Category'

        500:
         description: server error
             
    post:
      tags:
        - categories
      summary: create a category
      requestBody:
         content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Category'
       
      responses:
        201:
          description: create a category
          content: 
           application/json:
            schema: 
               $ref: '#/components/schemas/Category'

        500:
         description: server error       
  /categories/{categoryId}:

    get:
      tags:
         - categories 
      summary: get a category
      parameters:
        - in: path
          name: categoryId 
          required: true
          schema:
           type: string
      responses:
        201:
          description: find a category by Id 
          content: 
           application/json:
            schema: 
               $ref: '#/components/schemas/Category'
        404:
         description: category is not found   
        500:
         description: server error      

    delete:
      tags:
         - categories
      summary: delete a category
      parameters:
        - in: path
          name: categoryId 
          required: true
          schema:
           type: string
      responses:
        200:
          description: delete a category by Id 
        404:
         description: category is not found   
        500:
         description: server error    

    
    put:
      tags:
        - categories
      summary: update a category
      parameters:
        - in: path
          name: categoryId 
          required: true
          schema:
           type: string
      requestBody:
        content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Category'
      responses:
        200:
          description: update a category by Id 
          content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Category'
        404:
         description: category is not found   
        500:
         description: server error                 
  /orders:
    get:
      tags:
        - orders
      summary: return all orders  
      responses:
        200:
          description: a list of orders
          content: 
           application/json:
            schema:
             type: array
             items: 
               $ref: '#/components/schemas/Order'

        500:
         description: server error
             
    post:
      tags:
        - orders
      summary: create a order
      requestBody:
         content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Order'
       
      responses:
        201:
          description: create a order
          content: 
           application/json:
            schema: 
               $ref: '#/components/schemas/Order'

        500:
         description: server error       
  /orders/{orderId}:    
    get:
      tags:
         - orders 
      summary: get an order
      parameters:
        - in: path
          name: orderId 
          required: true
          schema:
           type: string
      responses:
        201:
          description: find an order by Id 
          content: 
           application/json:
            schema: 
               $ref: '#/components/schemas/Order'
        404:
         description: order is not found   
        500:
         description: server error      

    delete:
      tags:
         - orders
      summary: delete an order
      parameters:
        - in: path
          name: orderId 
          required: true
          schema:
           type: string
      responses:
        200:
          description: delete an order by Id 
        404:
         description: order is not found   
        500:
         description: server error    

    
    put:
      tags:
        - orders
      summary: update an order
      parameters:
        - in: path
          name: orderId 
          required: true
          schema:
           type: string
      requestBody:
        content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Order'
      responses:
        200:
          description: update an order by Id 
          content: 
           application/json:
            schema:
               $ref: '#/components/schemas/Category'
        404:
         description: order is not found   
        500:
         description: server error 

        









































# {   
#    id: string,
#    title: string,
#    price: number,
#    description: string,
#    category: string,
#    image: string,
#    rating: {
#      rate:3.6,
#      count:128
#    }
# }
  